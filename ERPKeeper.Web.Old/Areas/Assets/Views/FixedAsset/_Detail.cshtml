@model ERPKeeper.Node.Models.Assets.FixedAsset

<div class="mb-2 bg-fb2">
    @using (Html.BeginForm("Save", "FixedAsset", new { }, FormMethod.Post, new { @id = "SaveForm" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Uid)

        @Html.DevExpress().FormLayout(settings =>
   {
       settings.Name = "Item";
       settings.Width = Unit.Pixel(450);
       // settings.ColCount = 2;
       settings.EncodeHtml = false;


       settings.Items.AddGroupItem(groupSettings =>
       {
           groupSettings.Caption = "Home";
           groupSettings.GroupBoxDecoration = GroupBoxDecoration.Box;
           groupSettings.ColCount = 2;


           groupSettings.Items.Add(m => m.Name, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;

               TextBoxSettings tb = (TextBoxSettings)itemSettings.NestedExtensionSettings;

           });

           groupSettings.Items.Add(m => m.Code, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;

               TextBoxSettings tb = (TextBoxSettings)itemSettings.NestedExtensionSettings;

           });


           groupSettings.Items.Add(m => m.AssetValue, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.SpinEdit;


               SpinEditSettings spinSettings = (SpinEditSettings)itemSettings.NestedExtensionSettings;
               spinSettings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
               spinSettings.Properties.SpinButtons.ShowIncrementButtons = false;
               spinSettings.Properties.NumberType = SpinEditNumberType.Float;
               spinSettings.Properties.DisplayFormatString = "N2";
               spinSettings.Properties.DisplayFormatInEditMode = true;
           });



           groupSettings.Items.Add(m => m.FixedAssetTypeUid, itemSettings =>
           {
               itemSettings.Caption = Html.ActionLink("FixedAssetType", "Home", "FixedAssetTypes", new { Area = "Assets" }, null).ToHtmlString();
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;



               ComboBoxSettings cb = (ComboBoxSettings)itemSettings.NestedExtensionSettings;

               cb.Properties.TextField = "Name";
               cb.Properties.ValueField = "Uid";
               cb.Properties.ValueType = typeof(Guid);
               cb.Properties.DataSource = erpNodeDBContext.FixedAssetTypes.ToList();
           });

           groupSettings.Items.Add(m => m.StartDeprecationDate, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.Caption = "Start Date";
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;


               DateEditSettings tb = (DateEditSettings)itemSettings.NestedExtensionSettings;

           });
           groupSettings.Items.Add(m => m.RetirementDate, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.Caption = "Retire Date";
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;


               DateEditSettings tb = (DateEditSettings)itemSettings.NestedExtensionSettings;
         
           });



           groupSettings.Items.Add(m => m.Reference, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;

               TextBoxSettings tb = (TextBoxSettings)itemSettings.NestedExtensionSettings;
           });


       });



       settings.Items.AddGroupItem(groupSettings =>
       {
           groupSettings.Caption = "Memo";
           groupSettings.GroupBoxDecoration = GroupBoxDecoration.Box;
           groupSettings.ColCount = 1;

           groupSettings.Items.Add(m => m.Memo, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";

               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.Memo;
               itemSettings.ShowCaption = DefaultBoolean.False;
               MemoSettings cb = (MemoSettings)itemSettings.NestedExtensionSettings;

               cb.Width = Unit.Percentage(100);


           });
       });
       settings.Items.AddGroupItem(groupSettings =>
       {
           groupSettings.Caption = "Ending";
           groupSettings.GroupBoxDecoration = GroupBoxDecoration.Box;
           groupSettings.ColCount = 1;

           groupSettings.Items.Add(m => m.SavageValue, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.SpinEdit;

               SpinEditSettings spinSettings = (SpinEditSettings)itemSettings.NestedExtensionSettings;
               spinSettings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
               spinSettings.Properties.SpinButtons.ShowIncrementButtons = false;
               spinSettings.Properties.NumberType = SpinEditNumberType.Float;
               spinSettings.Properties.DisplayFormatString = "N2";

               spinSettings.Properties.DisplayFormatInEditMode = true;

           });

           groupSettings.Items.Add(m => m.EndDeprecationDate, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.Caption = "End Date";
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;

               DateEditSettings tb = (DateEditSettings)itemSettings.NestedExtensionSettings;

               tb.Enabled = false;
           });
       });

























       if (Model.PostStatus == ERPKeeper.Node.Models.Accounting.Enums.LedgerPostStatus.Editable)
       {
           settings.Items.Add(item =>
           {
               item.NestedExtensionType = FormLayoutNestedExtensionItemType.Button;
               item.ShowCaption = DefaultBoolean.False;
               item.HorizontalAlign = FormLayoutHorizontalAlign.Right;
               var button = (ButtonSettings)item.NestedExtensionSettings;
               button.Name = "SaveButton";
               button.Text = "Save";
               button.UseSubmitBehavior = true;

           });
       }
   }).GetHtml()
    }


</div>
