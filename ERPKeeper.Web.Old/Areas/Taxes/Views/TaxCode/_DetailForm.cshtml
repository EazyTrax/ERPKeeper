
@model ERPKeeper.Node.Models.Taxes.TaxCode

<div class="bg-fb2">


    @using (Html.BeginForm("Save", "TaxCode", new { Area = "Taxes" }, FormMethod.Post, new { @id = "SaveForm" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Uid)


        @Html.DevExpress().FormLayout(settings =>
   {
       settings.Name = "TaxCodeForm";

       settings.ColCount = 1;
       settings.EncodeHtml = false;

       settings.Items.AddGroupItem(groupSettings =>
       {
           groupSettings.Caption = "Tax Code";
           groupSettings.GroupBoxDecoration = GroupBoxDecoration.Box;

           groupSettings.Items.Add(m => m.Name, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
           });

           groupSettings.Items.Add(m => m.Code, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
           });

           groupSettings.Items.Add(m => m.TaxDirection, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
           });



  

           groupSettings.Items.Add(m => m.isDefault, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
           });

           groupSettings.Items.Add(m => m.isRecoverable, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
           });

           groupSettings.Items.Add(m => m.Description, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.Memo;
           });

           groupSettings.Items.Add(m => m.TaxRate, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.SpinEdit;
           });


       });

       settings.Items.AddGroupItem(groupSettings =>
       {
           groupSettings.Caption = "Tax Account";
           groupSettings.GroupBoxDecoration = GroupBoxDecoration.Box;

           groupSettings.Items.Add(m => m.TaxAccountGuid, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.Caption = Html.ActionLink("Tax Account", "Home", "ChartOfAccount", new { Area = "Accounting" }, null).ToHtmlString();
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;

               ComboBoxSettings cb = (ComboBoxSettings)itemSettings.NestedExtensionSettings;

               cb.Properties.TextField = "Name";
               cb.Properties.ValueField = "Uid";
               cb.Properties.ValueType = typeof(Guid);
               cb.Properties.DataSource = Organization.ChartOfAccount.ListTaxAccounts(Model.TaxDirection);

           });

           groupSettings.Items.Add(m => m.InputTaxAccountGuid, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.Caption = Html.ActionLink("InputTax Account", "Home", "ChartOfAccount", new { Area = "Accounting" }, null).ToHtmlString();
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;

               ComboBoxSettings cb = (ComboBoxSettings)itemSettings.NestedExtensionSettings;

               cb.Properties.TextField = "Name";
               cb.Properties.ValueField = "Uid";
               cb.Properties.ValueType = typeof(Guid);
               cb.Properties.DataSource = Organization.ChartOfAccount.TaxInputAndTaxExpenseAccounts;

           });

           groupSettings.Items.Add(m => m.TaxReceivableAccountGuid, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.Caption = Html.ActionLink("TaxReceivable", "Home", "ChartOfAccount", new { Area = "Accounting" }, null).ToHtmlString();
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;

               ComboBoxSettings cb = (ComboBoxSettings)itemSettings.NestedExtensionSettings;

               cb.Properties.TextField = "Name";
               cb.Properties.ValueField = "Uid";
               cb.Properties.ValueType = typeof(Guid);
               cb.Properties.DataSource = Organization.ChartOfAccount.TaxReceivableAccounts;

           });



           groupSettings.Items.Add(m => m.OutputTaxAccountGuid, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.Caption = Html.ActionLink("OutputTax Account", "Home", "ChartOfAccount", new { Area = "Accounting" }, null).ToHtmlString();
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
               ComboBoxSettings cb = (ComboBoxSettings)itemSettings.NestedExtensionSettings;

               cb.Properties.TextField = "Name";
               cb.Properties.ValueField = "Uid";
               cb.Properties.ValueType = typeof(Guid);
               cb.Properties.DataSource = Organization.ChartOfAccount.TaxOutputAccounts;
           });

           groupSettings.Items.Add(m => m.TaxPayableAccountGuid, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.Caption = Html.ActionLink("TaxPayable", "Home", "ChartOfAccount", new { Area = "Accounting" }, null).ToHtmlString();
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;

               ComboBoxSettings cb = (ComboBoxSettings)itemSettings.NestedExtensionSettings;

               cb.Properties.TextField = "Name";
               cb.Properties.ValueField = "Uid";
               cb.Properties.ValueType = typeof(Guid);
               cb.Properties.DataSource = Organization.ChartOfAccount.TaxPayableAccounts;
           });
       });

       settings.Items.Add(item =>
       {
           item.NestedExtensionType = FormLayoutNestedExtensionItemType.Button;
           item.ShowCaption = DefaultBoolean.False;
           item.HorizontalAlign = FormLayoutHorizontalAlign.Right;
           var button = (ButtonSettings)item.NestedExtensionSettings;
           button.Name = "SaveButton";
           button.Text = "Save";
           button.UseSubmitBehavior = true;

       });
   }).GetHtml()

    }

</div>