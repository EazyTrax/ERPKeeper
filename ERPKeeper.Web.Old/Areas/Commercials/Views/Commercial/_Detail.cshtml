@model ERPKeeper.Node.Models.Transactions.Commercial

@{
    var area = "";
    var controllerName = "";

    switch (Model.TransactionType)
    {
        case ERPKeeper.Node.Models.Accounting.Enums.ERPObjectType.Sale:
            area = "Customers";
            controllerName = "Sale";
            break;
        case ERPKeeper.Node.Models.Accounting.Enums.ERPObjectType.Purchase:
            area = "Suppliers";
            controllerName = "Purchase";
            break;
        default:
            area = "Commercials";
            controllerName = "Commercial";
            break;
    }

    var id = ViewContext.RouteData.Values["id"];
}



<script>
    function onComboBoxSelectedIndexChanged(s, e) {
        var taxUid = s.GetValue();
        var link = "@Url.Action("_UpdateTaxCode", "Commercial", new  { id = Model.Uid , taxUid = "taxUidValue", Area = "Commercials" })";
        link = link.replace("taxUidValue", taxUid);

        $.ajax({
            type: "POST",
            url: link,
            success: function (response) {
                $("#_Summary").html(response);
            }
        });
    }
</script>


<div class="mb-2">
    @using (Html.BeginForm("Save", controllerName, new { Area = area }, FormMethod.Post, new { @id = "SaveForm" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Uid)
        @Html.HiddenFor(model => model.RowVersion)
        @Html.HiddenFor(model => model.Total)
        @Html.HiddenFor(model => model.LinesTotal)
        @Html.HiddenFor(model => model.ProfileGuid)

        <div class="row">
            <div class="col-6">

                @Html.DevExpress().FormLayout(settings =>
           {
               settings.Name = "Item";
               settings.Width = Unit.Percentage(100);
               settings.EncodeHtml = false;
               settings.ColumnCount = 1;

               if (Model.PostStatus == ERPKeeper.Node.Models.Accounting.Enums.LedgerPostStatus.Locked)
                   settings.Enabled = false;

               settings.Items.AddGroupItem(groupSettings =>
               {
                   groupSettings.Caption = Model.Name;
                   groupSettings.GroupBoxDecoration = GroupBoxDecoration.Box;
                   groupSettings.GroupBoxStyle.Caption.ForeColor = System.Drawing.Color.Black;

                   groupSettings.Items.Add(m => m.NoInMonth, itemSettings =>
                   {

                       itemSettings.Caption = itemSettings.Caption = "No";
                       itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.SpinEdit;

                       var spinSetting = (SpinEditSettings)itemSettings.NestedExtensionSettings;
                       spinSetting.Properties.DisplayFormatString = "N0";
                       spinSetting.Properties.DisplayFormatInEditMode = true;
                   });
                   groupSettings.Items.Add(m => m.TrnDate, itemSettings =>
                   {
                       itemSettings.Caption = "Trn Date";
                       itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
                       itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;
                       DateEditSettings dateEditSettings = (DateEditSettings)itemSettings.NestedExtensionSettings;
                       dateEditSettings.Properties.DisplayFormatString = "dd-MMM-yy";
                       dateEditSettings.Properties.EditFormatString = "dd-MMM-yy";
                   });

                   groupSettings.Items.Add(m => m.Reference, itemSettings =>
                   {
                       itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
                       itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;



                       TextBoxSettings tb = (TextBoxSettings)itemSettings.NestedExtensionSettings;
                       tb.Properties.MaxLength = 30;
                   });




               });
               settings.Items.AddGroupItem(groupSettings =>
               {
                   groupSettings.Caption = "Project";
                   groupSettings.GroupBoxDecoration = GroupBoxDecoration.Box;
                   groupSettings.GroupBoxStyle.Caption.ForeColor = System.Drawing.Color.Black;

                   groupSettings.Items.Add(m => m.ProjectGuid, itemSettings =>
                   {

                       itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
                       itemSettings.Caption = itemSettings.Caption = Html.ActionLink("Project", "Home", "Projects", new { Area = "Projects" }, null).ToHtmlString();
                       itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;

                       ComboBoxSettings cb = (ComboBoxSettings)itemSettings.NestedExtensionSettings;

                       cb.Properties.TextField = "Name";
                       cb.Properties.ValueField = "Uid";
                       cb.Properties.ValueType = typeof(Guid);
                       cb.Properties.DataSource = Organization.Projects.ListAll();

                       cb.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.Always;
                   });


                   groupSettings.Items.Add(itemSettings =>
                   {
                       itemSettings.ShowCaption = DefaultBoolean.False;
                       itemSettings.SetNestedContent(() =>
                       {
                           Html.RenderPartial("~/Areas/Commercials/Views/Commercial/_Project_Detail.cshtml", Model);
                       });
                   });



               });
               settings.Items.AddGroupItem(groupSettings =>
               {

                   groupSettings.Caption = "Term";
                   groupSettings.GroupBoxDecoration = GroupBoxDecoration.Box;
                   groupSettings.GroupBoxStyle.Caption.ForeColor = System.Drawing.Color.Black;
                   groupSettings.Height = Unit.Pixel(120);

                   groupSettings.Items.Add(m => m.PaymentTermGuid, itemSettings =>
                   {
                       itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
                       itemSettings.Caption = itemSettings.Caption = Html.ActionLink("Payment", "", "PaymentTerms", new { Area = "Setting" }, null).ToHtmlString();
                       itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;

                       ComboBoxSettings cb = (ComboBoxSettings)itemSettings.NestedExtensionSettings;

                       cb.Properties.TextField = "Name";
                       cb.Properties.ValueField = "Uid";
                       cb.Properties.ValueType = typeof(Guid);
                       cb.Properties.DataSource = Organization.PaymentTerms.ListAll();
                       cb.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.Always;

                   });

                   groupSettings.Items.Add(m => m.ShippingTermGuid, itemSettings =>
                   {
                       itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
                       itemSettings.Caption = itemSettings.Caption = Html.ActionLink("Shipping", "", "PaymentTerms", new { Area = "Setting" }, null).ToHtmlString();
                       itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;

                       ComboBoxSettings cb = (ComboBoxSettings)itemSettings.NestedExtensionSettings;

                       cb.Properties.TextField = "Name";
                       cb.Properties.ValueField = "Uid";
                       cb.Properties.ValueType = typeof(Guid);
                       cb.Properties.DataSource = Organization.ShippingTerms.ListAll();
                       cb.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.Always;
                   });

                   if (Model.TransactionType == ERPKeeper.Node.Models.Accounting.Enums.ERPObjectType.Purchase)
                   {

                       groupSettings.Items.Add(m => m.TaxOffset, itemSettings =>
                       {

                           itemSettings.Caption = itemSettings.Caption = "Tax Offset";
                           itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.SpinEdit;

                           var spinSetting = (SpinEditSettings)itemSettings.NestedExtensionSettings;
                           spinSetting.Properties.DisplayFormatString = "N2";
                           spinSetting.Properties.DisplayFormatInEditMode = true;
                       });
                   }
               });
               settings.Items.AddGroupItem(groupSettings =>
               {
                   groupSettings.Caption = "Tax"; ;
                   groupSettings.GroupBoxDecoration = GroupBoxDecoration.Box;
                   groupSettings.GroupBoxStyle.Caption.ForeColor = System.Drawing.Color.Black;

                   groupSettings.Items.Add(m => m.TaxCodeId, itemSettings =>
                   {
                       itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
                       itemSettings.Caption = Html.ActionLink("Tax Code", "", "TaxCodes", new { Area = "Setting" }, null).ToHtmlString();
                       itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;

                       ComboBoxSettings cb = (ComboBoxSettings)itemSettings.NestedExtensionSettings;

                       cb.Properties.TextField = "Name";
                       cb.Properties.ValueField = "Uid";
                       cb.Properties.ValueType = typeof(Guid);
                       cb.Properties.DataSource = Organization.TaxCodes.GetList(Model.TransactionType);
                       cb.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.Always;
                   });




               });



           }).GetHtml()
            </div>
            <div class="col-6">
                @Html.DevExpress().FormLayout(settings =>
           {
               settings.Name = "Item2";
               settings.Width = Unit.Percentage(100);
               settings.EncodeHtml = false;
               settings.ColumnCount = 1;
               if (Model.PostStatus == ERPKeeper.Node.Models.Accounting.Enums.LedgerPostStatus.Locked)
                   settings.Enabled = false;

               settings.Items.AddGroupItem(groupSettings =>
               {
                   groupSettings.Caption = "Profile";
                   groupSettings.GroupBoxDecoration = GroupBoxDecoration.Box;
                   groupSettings.GroupBoxStyle.Caption.ForeColor = System.Drawing.Color.Black;

                   groupSettings.Items.Add(m => m.ProfileGuid, itemSettings =>
                   {
                       itemSettings.ShowCaption = DefaultBoolean.False;
                       itemSettings.SetNestedContent(() =>
                       {
                           Html.RenderPartial("~/Areas/Commercials/Views/Commercial/_Profile_Detail.cshtml", Model);
                       });
                   });
               });


               settings.Items.AddGroupItem(groupSettings =>
               {

                   groupSettings.Caption = "Memo";
                   groupSettings.GroupBoxDecoration = GroupBoxDecoration.Box;
                   groupSettings.GroupBoxStyle.Caption.ForeColor = System.Drawing.Color.Black;


                   groupSettings.Items.Add(m => m.Memo, itemSettings =>
                   {
                       itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
                       itemSettings.ShowCaption = DefaultBoolean.False;
                       itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.Memo;

                       MemoSettings mb = (MemoSettings)itemSettings.NestedExtensionSettings;
                       mb.Width = Unit.Percentage(100);
                       itemSettings.Height = Unit.Percentage(200);
                   });


               });

               if (Model.PostStatus != ERPKeeper.Node.Models.Accounting.Enums.LedgerPostStatus.Locked)
               {
                   settings.Items.Add(item =>
                   {
                       item.NestedExtensionType = FormLayoutNestedExtensionItemType.Button;
                       item.ShowCaption = DefaultBoolean.False;
                       item.HorizontalAlign = FormLayoutHorizontalAlign.Right;
                       var button = (ButtonSettings)item.NestedExtensionSettings;
                       button.Name = "SaveButton";
                       button.Text = "Save";
                       button.UseSubmitBehavior = true;

                   });
               }



           }).GetHtml()

            </div>
        </div>
    }
</div>




<div>
    @(Model.TaxPeriod?.Name)
</div>