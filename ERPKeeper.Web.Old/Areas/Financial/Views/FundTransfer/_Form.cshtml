
@model ERPKeeper.Node.Models.Financial.Transfer.FundTransfer

<div style="background-color:#EEEEEE;width:450px;">

    @using (Html.BeginForm("Save", "FundTransfer"))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Uid)


        @Html.DevExpress().FormLayout(settings =>
   {
       settings.Name = "Transfers";
       settings.Width = Unit.Percentage(100);
       settings.EncodeHtml = false;
       settings.ColCount = 1;


       if (Model.PostStatus == ERPKeeper.Node.Models.Accounting.Enums.LedgerPostStatus.Locked)
           settings.Enabled = false;

       settings.Items.AddGroupItem(groupSettings =>
       {
           groupSettings.Caption = "Transfer";
           groupSettings.GroupBoxDecoration = GroupBoxDecoration.Box;
           groupSettings.GroupBoxStyle.Caption.ForeColor = System.Drawing.Color.Black;





           groupSettings.Items.Add(m => m.TrnDate, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;
           });
           groupSettings.Items.Add(m => m.Reference, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
           });
       });



       settings.Items.AddGroupItem(groupSettings =>
       {
           groupSettings.Caption = "WithDraw";

           groupSettings.Items.Add(m => m.WithDrawAccountGuid, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.Caption = Html.ActionLink("WidthDraw Account", "Home", "ChartOfAccount", new { Area = "Accounting" }, null).ToHtmlString();
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;

               ComboBoxSettings cb = (ComboBoxSettings)itemSettings.NestedExtensionSettings;

               cb.Properties.TextField = "Name";
               cb.Properties.ValueField = "Uid";
               cb.Properties.ValueType = typeof(Guid);

               cb.Properties.DataSource = Organization.ChartOfAccount.GetCashEquivalentAccounts();
           });

           groupSettings.Items.Add(m => m.AmountwithDraw, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.SpinEdit;
               var spinSetting = (SpinEditSettings)itemSettings.NestedExtensionSettings;
               spinSetting.Properties.DisplayFormatString = "N2";
               spinSetting.Properties.DisplayFormatInEditMode = true;

           });

           groupSettings.Items.Add(m => m.AmountFee, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.SpinEdit;
               var spinSetting = (SpinEditSettings)itemSettings.NestedExtensionSettings;
               spinSetting.Properties.DisplayFormatString = "N2";
               spinSetting.Properties.DisplayFormatInEditMode = true;

           });

       });

       settings.Items.AddGroupItem(groupSettings =>
       {
           groupSettings.Caption = "Deposit";


           groupSettings.Items.Add(m => m.DepositAccountGuid, itemSettings =>
           {
               itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
               itemSettings.Caption = Html.ActionLink("Deposit Account", "Home", "ChartOfAccount", new { Area = "Accounting" }, null).ToHtmlString();
               itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;

               ComboBoxSettings cb = (ComboBoxSettings)itemSettings.NestedExtensionSettings;

               cb.Properties.TextField = "Name";
               cb.Properties.ValueField = "Uid";
               cb.Properties.ValueType = typeof(Guid);
               cb.Properties.DataSource = Organization.ChartOfAccount.GetCashEquivalentAccounts();
           });


        
       });



       settings.Items.Add(item =>
       {
           item.NestedExtensionType = FormLayoutNestedExtensionItemType.Button;
           item.ShowCaption = DefaultBoolean.False;
           item.HorizontalAlign = FormLayoutHorizontalAlign.Right;
           var button = (ButtonSettings)item.NestedExtensionSettings;
           button.Name = "SaveButton";
           button.Text = "Save";
           button.UseSubmitBehavior = true;
       });




   }).GetHtml()

    }

</div>