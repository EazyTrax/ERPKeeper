
@model ERPKeeper.Node.Models.Financial.Payments.RetentionType



@using (Html.BeginForm("Save", "RetentionType", FormMethod.Post, new { @id = "SaveForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Uid)


    @Html.DevExpress().FormLayout(settings =>
{
    settings.Name = "Payment";
    settings.EncodeHtml = false;

    settings.ColCount = 1;




    settings.Items.AddGroupItem(groupSettings =>
    {
        groupSettings.Caption = "Information";
        groupSettings.GroupBoxDecoration = GroupBoxDecoration.Box;

        groupSettings.Items.Add(m => m.RetentionDirection, itemSettings =>
        {
            itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
            itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
            TextBoxSettings tbs = (TextBoxSettings)itemSettings.NestedExtensionSettings;
            tbs.ReadOnly = true;

        });

        groupSettings.Items.Add(m => m.Name, itemSettings =>
        {
            itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
            itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
        });

        groupSettings.Items.Add(m => m.PaymentType, itemSettings =>
        {
            itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
            itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;


        });

        groupSettings.Items.Add(m => m.Rate, itemSettings =>
        {
            itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
            itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.SpinEdit;


        });

        groupSettings.Items.Add(m => m.Description, itemSettings =>
        {
            itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
            itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.Memo;


        });


    });



    settings.Items.AddGroupItem(groupSettings =>
    {
        groupSettings.Caption = "Account";

        groupSettings.Items.Add(m => m.RetentionToAccountGuid, itemSettings =>
        {
            itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";

            itemSettings.Caption = Html.ActionLink("Retention To", "Home", "ChartOfAccount", new { Area = "Accounting" }, null).ToHtmlString();
            itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;

            ComboBoxSettings cb = (ComboBoxSettings)itemSettings.NestedExtensionSettings;

            cb.Properties.TextField = "Name";
            cb.Properties.ValueField = "Uid";
            cb.Properties.ValueType = typeof(Guid);




            if (Model.RetentionDirection == ERPKeeper.Node.Models.Financial.Payments.Enums.RetentionDirection.Pay)
            {
                cb.Properties.DataSource = Organization.ChartOfAccount.LiabilityAccounts;
            }
            else if (Model.RetentionDirection == ERPKeeper.Node.Models.Financial.Payments.Enums.RetentionDirection.Receive)
            {
                cb.Properties.DataSource = Organization.ChartOfAccount.AssetAccounts;
            }


        });

        groupSettings.Items.Add(m => m.IsActive, itemSettings =>
        {
            itemSettings.CaptionCellStyle.CssClass = "CaptionWidth";
            itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.CheckBox;
        });


    });

    settings.Items.AddGroupItem(groupSettings =>
    {
        groupSettings.Caption = "Account";



        groupSettings.Items.Add(item =>
        {
            item.NestedExtensionType = FormLayoutNestedExtensionItemType.Button;
            item.ShowCaption = DefaultBoolean.False;
            item.HorizontalAlign = FormLayoutHorizontalAlign.Right;
            var button = (ButtonSettings)item.NestedExtensionSettings;
            button.Name = "SaveBt";
            button.Text = "Save";
            button.UseSubmitBehavior = true;

        });



    });

}).GetHtml()

}