<div class="bg-gray-100 p-2 mb-2 min-h-20" id="uploadContainer">
    <div class="mb-2 text-sm text-gray-600">
        <i class="fas fa-info-circle"></i> You can upload files by selecting them or pasting files from clipboard (Ctrl+V)
    </div>
    @(Html.DevExtreme().FileUploader()
        .ID("uploadFile")
        .Name("uploadFile")
        .Multiple(true)
        .AllowedFileExtensions(new string[] { ".xlsx", ".docx", ".pdf", ".png", ".jpg", ".txt" })
        .UploadMode(FileUploadMode.UseButtons)
        .UploadUrl($"/{CompanyId}/Customers/SaleQuotes/{Model.Id}/DocumentUpload"))
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const uploadContainer = document.getElementById('uploadContainer');
    const fileUploader = DevExpress.ui.dxFileUploader.getInstance(document.getElementById('uploadFile'));
    
    // Add visual feedback for clipboard functionality
    uploadContainer.style.border = '2px dashed #ccc';
    uploadContainer.style.transition = 'border-color 0.3s ease';
    
    // Handle paste events - only use one event listener to prevent duplicates
    document.addEventListener('paste', function(e) {
        // Check if we're in the upload area or its children
        if (uploadContainer.contains(e.target) || e.target === uploadContainer) {
            handlePaste(e);
        }
    });
    
    // Make container focusable and add visual feedback
    uploadContainer.setAttribute('tabindex', '0');
    
    uploadContainer.addEventListener('focus', function() {
        this.style.borderColor = '#007bff';
        this.style.backgroundColor = '#f8f9fa';
    });
    
    uploadContainer.addEventListener('blur', function() {
        this.style.borderColor = '#ccc';
        this.style.backgroundColor = '#f8f8f8';
    });
    
    function handlePaste(e) {
        e.preventDefault();
        e.stopPropagation(); // Prevent event bubbling
        
        const items = e.clipboardData.items;
        const files = [];
        
        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            
            // Check if the item is a file (any type)
            if (item.kind === 'file') {
                const blob = item.getAsFile();
                if (blob) {
                    // Create a more descriptive filename
                    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                    let extension = 'bin'; // default extension
                    let filename = `clipboard-file-${timestamp}`;
                    
                    // Determine extension and filename based on MIME type
                    if (blob.type) {
                        if (blob.type.startsWith('image/')) {
                            extension = blob.type.split('/')[1] || 'png';
                            // Handle jpeg vs jpg
                            if (extension === 'jpeg') extension = 'jpg';
                            filename = `clipboard-image-${timestamp}.${extension}`;
                        } else if (blob.type === 'application/pdf') {
                            extension = 'pdf';
                            filename = `clipboard-document-${timestamp}.${extension}`;
                        } else if (blob.type === 'text/plain') {
                            extension = 'txt';
                            filename = `clipboard-text-${timestamp}.${extension}`;
                        } else if (blob.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') {
                            extension = 'xlsx';
                            filename = `clipboard-excel-${timestamp}.${extension}`;
                        } else if (blob.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
                            extension = 'docx';
                            filename = `clipboard-word-${timestamp}.${extension}`;
                        } else {
                            // For other supported types or unknown types, use generic naming
                            const supportedExtensions = ['.xlsx', '.docx', '.pdf', '.png', '.jpg', '.txt'];
                            // Try to guess from common MIME types
                            const mimeExtensions = {
                                'application/msword': 'doc',
                                'application/vnd.ms-excel': 'xls',
                                'text/csv': 'csv'
                            };
                            
                            if (mimeExtensions[blob.type]) {
                                extension = mimeExtensions[blob.type];
                                filename = `clipboard-file-${timestamp}.${extension}`;
                            } else {
                                filename = `clipboard-file-${timestamp}`;
                            }
                        }
                    } else {
                        filename = `clipboard-file-${timestamp}`;
                    }
                    
                    // Create a new File object with a proper name
                    const file = new File([blob], filename, {
                        type: blob.type,
                        lastModified: Date.now()
                    });
                    
                    files.push(file);
                }
            }
        }
        
        if (files.length > 0) {
            // Show visual feedback
            uploadContainer.style.borderColor = '#28a745';
            uploadContainer.style.backgroundColor = '#d4edda';
            
            setTimeout(() => {
                uploadContainer.style.borderColor = '#ccc';
                uploadContainer.style.backgroundColor = '#f8f8f8';
            }, 1000);
            
            // Add files to the DevExtreme FileUploader
            // Note: DevExtreme FileUploader doesn't have a direct API to add files programmatically
            // So we'll trigger the upload directly
            uploadFilesDirectly(files);
        }
    }
    
    function uploadFilesDirectly(files) {
        const uploadUrl = fileUploader.option('uploadUrl');
        
        files.forEach(function(file) {
            const formData = new FormData();
            formData.append('uploadFile', file);
            
            fetch(uploadUrl, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (response.ok) {
                    console.log('File uploaded successfully:', file.name);
                    // You might want to refresh the document list here
                    // or show a success message
                    showUploadMessage('File uploaded successfully: ' + file.name, 'success');
                } else {
                    console.error('Upload failed for:', file.name);
                    showUploadMessage('Upload failed for: ' + file.name, 'error');
                }
            })
            .catch(error => {
                console.error('Upload error:', error);
                showUploadMessage('Upload error for: ' + file.name, 'error');
            });
        });
    }
    
    function showUploadMessage(message, type) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'} mt-2`;
        messageDiv.style.fontSize = '12px';
        messageDiv.style.padding = '8px';
        messageDiv.textContent = message;
        
        uploadContainer.appendChild(messageDiv);
        
        setTimeout(() => {
            if (messageDiv.parentNode) {
                messageDiv.parentNode.removeChild(messageDiv);
            }
        }, 3000);
    }
});
</script>