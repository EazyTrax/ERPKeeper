



<div id="treeListDemo" class="mb-3 border">

    @(Html.DevExtreme().DataGrid<ERPKeeperCore.Enterprise.Models.Customers.Sale>()
            .ID("gridList")
            .KeyExpr("Id")
            .DataSource(d => d.RemoteController().Key("Id")
            .LoadUrl($"/API/{CompanyId}/Customers/Sales/All")
            .InsertUrl($"/API/{CompanyId}/Customers/Sales/Insert")
            .UpdateUrl($"/API/{CompanyId}/Customers/Sales/Update")
            .UpdateMethod("Post")
            .InsertMethod("Post")
            )
            .RowAlternationEnabled(false)
            .AllowColumnReordering(true)
            .Editing(editing => editing.Mode(GridEditMode.Row).AllowUpdating(IsOnEditMode).AllowAdding(IsOnEditMode).UseIcons(true))
            .ShowRowLines(true)
            .ShowBorders(false)
            .Paging(paging => paging.PageSize(100))
            .AllowColumnResizing(true).AllowColumnReordering(true)
            .HeaderFilter(headerFilter => headerFilter.Visible(true).Search(s => s.Enabled(true)))
            .FilterRow(filterRow => filterRow.Visible(true).ApplyFilter(GridApplyFilterMode.Auto))
            .ColumnAutoWidth(false)
            .ColumnChooser(columnChooser => columnChooser.Enabled(true))
            .StateStoring(s => s.Enabled(true).Type(StateStoringType.LocalStorage).StorageKey("Custommer_Sales"))
            .Columns(columns =>
            {
                columns.AddFor(m => m.AgeInDays).Width(60).AllowEditing(false).ShowInColumnChooser(true)
            .CellTemplate(@<text><span class="text-<%= data.AgeColor %>-400"><%= data.AgeInDays %></span></text>);

                columns.AddFor(m => m.Date)
            .AllowEditing(false)
            .SortOrder(SortOrder.Desc)
            .SortIndex(1).Width(130);

                columns.AddFor(m => m.No).Width(60).ShowInColumnChooser(true);

                columns.AddFor(m => m.Status).AllowEditing(false)
            .AllowEditing(false)
            .Width(80)
            .Lookup(lookup => lookup
            .DataSource(Html.GetEnumSelectList<ERPKeeperCore.Enterprise.Models.Customers.Enums.SaleStatus>()
                .Select(i => new { Value = int.Parse(i.Value), Text = i.Text })
                .ToList())
            .DisplayExpr("Text")
            .ValueExpr("Value")
            );

                columns.AddFor(m => m.Name)
            .AllowEditing(false)
            .Width(130)
            .CellTemplate(@<text><a target="_self" href="/@CompanyId/Customers/Sales/<%= data.Id %>/"><%= data.Name %></a></text>);


                columns.AddFor(m => m.CustomerId)
            .MinWidth(250)
            .Lookup(lookup => lookup
            .DataSource(Organization.ErpCOREDBContext.Customers.Select(i => new { Value = i.Id, Text = i.Profile.Name }).ToList())
            .DisplayExpr("Text")
            .ValueExpr("Value"))
            .CellTemplate(@<text><a target="_self" href="/@CompanyId/Customers/Customers/<%= data.CustomerId %>/"><%= displayValue %></a></text>);


                columns.AddFor(m => m.Reference)
            .Width(180);

                columns.AddFor(m => m.Total).Width(130).AllowEditing(false).Format("#,##0.00");
                columns.AddFor(m => m.Tax).Width(130).AllowEditing(false).Format("#,##0.00");

                columns.AddFor(m => m.TaxCodeId).Lookup(lookup => lookup
            .DataSource(Organization.ErpCOREDBContext.TaxCodes.Select(i => new { Value = i.Id, Text = i.Name }).ToList())
            .DisplayExpr("Text")
            .ValueExpr("Value"))
            .ShowInColumnChooser(true)
            .Visible(false)
            .MinWidth(120)
            .HeaderCellTemplate(@<text>TaxCode</text>)
            .CellTemplate(@<text><a href="/@CompanyId/Taxes/TaxCodes/<%= data.TaxCodeId %>/"><%= displayValue %></a></text>);

                columns.AddFor(m => m.TaxPeriodId)
            .Lookup(lookup => lookup
            .DataSource(Organization.ErpCOREDBContext.TaxPeriods.Select(i => new { Value = i.Id, Text = i.Name }).ToList())
            .DisplayExpr("Text")
            .ValueExpr("Value"))
            .AllowEditing(false)
            .ShowInColumnChooser(true)
            .Visible(false)
            .HeaderCellTemplate(@<text>TaxPeriod</text>)
        .CellTemplate(@<text><a href="/@CompanyId/Taxes/TaxPeriods/<%= data.TaxPeriodId %>/"><%= displayValue %></a></text>);


                columns.AddFor(m => m.IncomeAccountId)
            .Lookup(lookup => lookup.DataSource(Organization.ChartOfAccount.IncomeAccounts.Select(t => new { t.Id, t.Name }).OrderBy(t => t.Name).ToList())
            .DisplayExpr("Name")
            .ValueExpr("Id"))
            .Width(150)
            .ShowInColumnChooser(true)
            .Visible(false)
            .HeaderCellTemplate(@<text>Expense</text>)
        .CellTemplate(@<text><a href="/@CompanyId/Accounting/Accounts/<%= data.WithDrawAccountId %>/"><%= displayValue %></a></text>);
            
        
        columns.AddFor(m => m.ProjectId)
            .Lookup(lookup => lookup
            .DataSource(Organization.ErpCOREDBContext.Projects.Select(i => new { Value = i.Id, Text = i.Name }).ToList())
            .DisplayExpr("Text")
            .ValueExpr("Value"))
            .Width(150)
            .Visible(false)
            .ShowInColumnChooser(true)
            .HeaderCellTemplate(@<text>Project</text>)
        .CellTemplate(@<text><a href="/@CompanyId/Projects/<%= data.ProjectId %>/"><%= displayValue %></a></text>);







                columns.AddFor(m => m.IsPosted)
            .AllowEditing(false)
            .Width(30)
            .HeaderCellTemplate(@<text> </text>)
        .CellTemplate(@<text><i class="fas fa-fingerprint text-<%= data.IsPosted %>"></i></text>);


            })


        .Summary(s =>
        s.TotalItems(items =>
        {

            items.AddFor(m => m.LinesTotalAfterDiscount)
            .SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat("#,##0.00");


            items.AddFor(m => m.Total)
            .SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat("#,##0.00");
        }))


        .OnInitNewRow("onInitNewRow")
        .OnRowPrepared("onRowPrepared")
        )
</div>

@{
    var taxCode = Organization.TaxCodes.GetDefault(ERPKeeperCore.Enterprise.Models.Taxes.Enums.TaxDirection.Output);
}

<script>
    function onInitNewRow(e) {
        const today = new Date();
        e.data.Date = today;
        e.data.Status = 0;
        e.data.TaxCodeId = '@(taxCode?.Id)';
    }
</script>

<script>
    function onRowPrepared(e) {
        if (e.rowType === 'data') {

            let ageColor = e.data.AgeColor;
            let status = e.data.Status;
            let color;

            if(status != 2){
                switch (ageColor) {
                    case 'blue':
                        color = '#cce5ff'; // Light blue
                        break;
                    case 'yellow':
                        color = '#fff3cd'; // Light yellow
                        break;
                    case 'red':
                        color = '#f8d7da'; // Light red
                        break;
                    default:
                        color = '';
                    }
                if (color) {
                    e.rowElement.css('background-color', color);
                }
            }
        }
    }
</script>
