@model ERPKeeperCore.Enterprise.Models.Customers.Sale

@* <div class="p-2 text-right">
    <a href="/@CompanyId/Customers/Sales/@Model.Id/Items/Avaliable"><i class="fa-solid fa-circle-plus text-lg"></i> Item</a>
</div>
 *@

<div id="treeList" class="mt-2 mb-3 border">

    @(Html.DevExtreme().DataGrid<ERPKeeperCore.Enterprise.Models.Customers.SaleItem>()
        .ID("gridList")
        .KeyExpr("Id")
        .ShowRowLines(true)
        .ShowBorders(false)
        .Paging(paging => paging.PageSize(100))
        .HeaderFilter(headerFilter => headerFilter.Visible(true).Search(s => s.Enabled(true)))
        .Width("100%")
        .ColumnAutoWidth(false)
        .WordWrapEnabled(true)
        .AllowColumnResizing(true)
        .DataSource(d =>
        d.RemoteController()
        .Key("Id")
        .LoadUrl($"/API/{CompanyId}/Customers/Sales/{Model.Id}/Items/All")
        .InsertUrl($"/API/{CompanyId}/Customers/Sales/{Model.Id}/Items/Insert")
        .UpdateUrl($"/API/{CompanyId}/Customers/Sales/{Model.Id}/Items/Update")
        .UpdateMethod("Post")
        .DeleteUrl($"/API/{CompanyId}/Customers/Sales/{Model.Id}/Items/Delete")
        .DeleteMethod("Post")
        )
        .Editing(editing => editing.Mode(GridEditMode.Popup).AllowUpdating(IsOnEditMode).UseIcons(true))
        .StateStoring(s => s.Enabled(true).Type(StateStoringType.LocalStorage).StorageKey("Custommer_Sales_Sale"))
        .KeyExpr("Id")
        .WordWrapEnabled(true)
        .ColumnChooser(c => c.Enabled(true))
        .Columns(columns =>
        {
            columns.AddFor(m => m.Order).SortOrder(SortOrder.Asc).SortIndex(0).Width(40);
            columns.AddFor(m => m.PartNumber).CssClass("bg-gray-200").Width(150).CellTemplate(@<text><a target="_self" href="/@CompanyId/Products/Items/<%= data.ItemId %>/"><%= data.PartNumber %></a></text>);
            columns.AddFor(m => m.Description).CssClass("bg-gray-200").FormItem(i => i.Editor(e => e.TextArea().MinHeight(300)));
            columns.AddFor(m => m.Price).CssClass("bg-gray-200").Width(100).Format("#,##0.0000");
      
         @* 
            columns.AddFor(m => m.DiscountPercent).CssClass("bg-gray-200").Width(100).Format("#,##0.00");
            columns.AddFor(m => m.PriceAfterDiscount).AllowEditing(false).Width(100).Format("#,##0.00");
         *@    

            columns.AddFor(m => m.Serial).Visible(false).ShowInColumnChooser(true).FormItem(i => i.Editor(e => e.TextArea().MinHeight(300)));
            columns.AddFor(m => m.Quantity).Width(80).Format("#,##0.00");
            columns.AddFor(m => m.LineTotal).Width(100).Format("#,##0.0000").FormItem(i => i.Visible(false));

        })
        .OnInitNewRow("function(e) { e.data.SalePrice = 0;e.data.Amount = 1; }")
        .Summary(s => s.TotalItems(items =>
        {
            items.AddFor(m => m.Quantity).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat("#,##0.00");
            items.AddFor(m => m.LineTotal).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat("#,##0.00");
        }))
        .Toolbar(toolbar =>
            {
                toolbar.Items(items =>
                {
                    items.Add().Widget(w =>
                    w.Button()
                        .Text("Item")
                        .Icon("fa-solid fa-circle-plus")
                    .OnClick($"function() {{ window.open('/{CompanyId}/Customers/Sales/{@Model.Id}/Items/Avaliable'); }}"))
                    .Location(ToolbarItemLocation.After);
                });  
        })
        )
</div>