@model ERPKeeperCore.Enterprise.Models.Customers.Enums.SaleQuoteStatus

<div id="treeListDemo" class="mb-3 border">

    @(Html.DevExtreme().DataGrid<ERPKeeperCore.Enterprise.Models.Customers.SaleQuote>()
                .ID("gridList")
                .DataSource(d => d.RemoteController().Key("Id")
                .LoadUrl($"/API/{CompanyId}/Customers/SaleQuotes/List/{Model.ToString()}")
                .InsertUrl($"/API/{CompanyId}/Customers/SaleQuotes/Insert")
                .UpdateUrl($"/API/{CompanyId}/Customers/SaleQuotes/Update")
                .UpdateMethod("Post")
                .InsertMethod("Post")
                )
                .Editing(editing => editing.Mode(GridEditMode.Batch).AllowUpdating(IsOnEditMode).AllowAdding(IsOnEditMode).UseIcons(true))
                .StateStoring(stateStoring => stateStoring.Enabled(true).Type(StateStoringType.LocalStorage).StorageKey($"Customers_SaleQuotes_{Model.ToString()}"))
                .RowAlternationEnabled(false).AllowColumnReordering(true).AllowColumnResizing(true).AllowColumnReordering(true)
                .KeyExpr("Id")
                .ShowRowLines(false)
                .ShowBorders(false)
                .Paging(paging => paging.PageSize(100))

                .HeaderFilter(headerFilter => headerFilter.Visible(true).Search(s => s.Enabled(true)))
                .FilterRow(filterRow => filterRow.Visible(true).ApplyFilter(GridApplyFilterMode.Auto))
                .ColumnAutoWidth(false)
                .ColumnChooser(columnChooser => columnChooser.Enabled(true))
                .Columns(columns =>
                {
                    columns.AddFor(m => m.AgeInDays).Width(60).AllowEditing(false).ShowInColumnChooser(true)
                .CellTemplate(@<text><span class="text-<%= data.AgeColor %>-400"><%= data.AgeInDays %></span></text>);


                    columns.AddFor(m => m.Date)
                .SortOrder(SortOrder.Desc)
                .SortIndex(1)
                .Width(130);

                    columns.AddFor(m => m.Status)
                .Width(80)
                .Lookup(lookup => lookup
                .DataSource(Html.GetEnumSelectList<ERPKeeperCore.Enterprise.Models.Customers.Enums.SaleQuoteStatus>().Select(i => new { Value = int.Parse(i.Value), Text = i.Text }))
                .DisplayExpr("Text")
                .ValueExpr("Value")
                );

                    columns.AddFor(m => m.Name)
                .Width(150)
                .AllowEditing(false)
                .CellTemplate(@<text><a href="/@CompanyId/Customers/SaleQuotes/<%= data.Id %>/"><%= data.Name %></a></text>);


                    columns.AddFor(m => m.CustomerId)
                .Lookup(lookup => lookup
                .DataSource(Organization.ErpCOREDBContext.Customers.Select(i => new { Value = i.Id, Text = i.Profile.Name }))
                .DisplayExpr("Text")
                .ValueExpr("Value"))
                .HeaderCellTemplate("Customer")
                .CellTemplate(@<text><a href="/@CompanyId/Customers/Customers/<%= data.CustomerId %>/"><%= displayValue %></a></text>);


                    columns.AddFor(m => m.Reference).Width(180);
                    columns.AddFor(m => m.Total).Width(130).AllowEditing(false).Format("#,##0.00");
                    columns.AddFor(m => m.Tax).Width(130).AllowEditing(false).Format("#,##0.00");

                    columns.AddFor(m => m.TaxCodeId)
                .Lookup(lookup => lookup
                .DataSource(Organization.ErpCOREDBContext.TaxCodes.Select(i => new { Value = i.Id, Text = i.Name }))
                .DisplayExpr("Text")
                .ValueExpr("Value"))
                .Width(150)
                .HeaderCellTemplate(@<text>TaxCode</text>)
            .CellTemplate(@<text><a href="/@CompanyId/Taxes/TaxCodes/<%= data.TaxCodeId %>/"><%= displayValue %></a></text>);
                })
            .Summary(s =>
            s.TotalItems(items =>
            {
                items.AddFor(m => m.LinesTotal).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(",##0");
                items.AddFor(m => m.Total).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(",##0");
            }))
            .OnInitNewRow("onInitNewRow")
            .OnRowPrepared("onRowPrepared")
            )
</div>

@{
    var taxCode = Organization.TaxCodes.GetDefault(ERPKeeperCore.Enterprise.Models.Taxes.Enums.TaxDirection.Output);
}

<script>


        function onInitNewRow(e) {
            const today = new Date();
            e.data.Date = today;
            e.data.Status = 0;
            e.data.TaxCodeId = '@taxCode?.Id';

      }


    function onRowPrepared(e) {
        if (e.rowType === 'data') {
            let ageColor = e.data.AgeColor;
            let status = e.data.Status;
            let color;

            switch (ageColor) {
                case 'blue':
                    color = '#cce5ff'; // Light blue
                    break;
                case 'yellow':
                    color = '#fff3cd'; // Light yellow
                    break;
                case 'red':
                    color = '#f8d7da'; // Light red
                    break;
                default:
                    color = '';
            }
            if (color) {
                e.rowElement.css('background-color', color);
            }
        }
    }
</script>
