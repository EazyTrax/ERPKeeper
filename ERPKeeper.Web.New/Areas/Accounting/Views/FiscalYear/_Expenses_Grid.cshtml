@model ERPKeeper.Node.Models.Accounting.FiscalYear

<div class="mb-2 border-top">
    @(Html.DevExtreme().DataGrid<ERPKeeper.Node.Models.Accounting.FiscalYears.PeriodAccountBalance>()
            .ID("LedgerList")
            .KeyExpr("Uid")
            .DataSource(d => d.RemoteController().LoadUrl($"/api/{CompanyId}/Accounting/FiscalYears/{Model.Uid}/Expenses/All"))
            .AllowColumnReordering(true)
            .RowAlternationEnabled(false).ShowRowLines(true).HoverStateEnabled(true)
            .ShowColumnLines(true)
            .ShowBorders(false)
            .ColumnAutoWidth(false)
            .Paging(pagging => pagging.Enabled(false))
            .Width("100%")
            .Columns(columns =>
            {

                columns.AddFor(m => m.Account.Type)
                .HeaderCellTemplate("Type")
                .Width(100).SortOrder(SortOrder.Asc).SortIndex(1).Lookup(lookup => lookup
                .DataSource(Html.GetEnumSelectList<ERPKeeper.Node.Models.Accounting.AccountTypes>().Select(i => new { Value = int.Parse(i.Value), Text = i.Text }))
                .DisplayExpr("Text")
                .ValueExpr("Value")
                );

                columns.AddFor(m => m.Account.SubEnumType).SortOrder(SortOrder.Asc).SortIndex(2)
                .HeaderCellTemplate("SubType").Width(200).Lookup(lookup => lookup
                .DataSource(Html.GetEnumSelectList<ERPKeeper.Node.Models.Accounting.AccountSubTypes>().Select(i => new { Value = int.Parse(i.Value), Text = i.Text }))
                .DisplayExpr("Text")
                .ValueExpr("Value")
                );
                columns.AddFor(m => m.AccountGuid)
                    .Lookup(lookup => lookup.DataSource(Organization.ErpNodeDBContext.AccountItems.Select(t => new { t.Uid, t.Name }).OrderBy(t => t.Name).ToList()).DisplayExpr("Name").ValueExpr("Uid"))
                    .HeaderCellTemplate(@<text>Account</text>);

                columns.AddFor(m => m.Debit).Width(100).Format(Format.FixedPoint);
                columns.AddFor(m => m.Credit).Width(100).Format(Format.FixedPoint);
            })
            .Summary(s =>  s.TotalItems(items =>
            {
            items.AddFor(m => m.Debit).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
            items.AddFor(m => m.Credit).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
            })
            )
        )
</div>










