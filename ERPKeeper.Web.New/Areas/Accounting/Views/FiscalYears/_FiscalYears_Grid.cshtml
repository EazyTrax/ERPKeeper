<div class="mb-2 border-top">
    @(Html.DevExtreme().DataGrid<ERPKeeperCore.Enterprise.Models.Accounting.FiscalYear>()
        .ID("AssetsTreeList")
        .KeyExpr("Id")
        .DataSource(d => d.RemoteController()
        .Key("Id")
        .LoadUrl($"/api/{CompanyId}/Accounting/FiscalYears/All")
        .UpdateUrl($"/api/{CompanyId}/Accounting/FiscalYears/Update")
        .UpdateMethod("Post"))
        .AllowColumnReordering(true)
        .RowAlternationEnabled(false).ShowRowLines(true).HoverStateEnabled(true)
        .ShowColumnLines(true)
        .ShowBorders(false)
        .HeaderFilter(headerFilter => headerFilter.Visible(true).AllowSearch(true))
        .FilterRow(filterRow => filterRow.Visible(true).ApplyFilter(GridApplyFilterMode.Auto))
        .ColumnAutoWidth(false)
        .Paging(pagging => pagging.PageSize(100))
        .Editing(editing => editing.Mode(GridEditMode.Row).AllowUpdating(IsOnEditMode).AllowAdding(IsOnEditMode).UseIcons(true))
        @*  .AllowColumnResizing(true)*@

        .Columns(columns =>
        {
            columns.AddFor(m => m.Name).SortOrder(SortOrder.Asc).CellTemplate(@<text><a href="/@CompanyId/Accounting/FiscalYears/<%= data.Id %>/"><%= data.Name %></a></text>);
            columns.AddFor(m => m.StartDate).Format(Format.ShortDate);
            columns.AddFor(m => m.EndDate).Format(Format.ShortDate);
            columns.AddFor(m => m.DayCount);
            columns.AddFor(m => m.Status).Width(100).Lookup(lookup => lookup.DataSource(Html.GetEnumSelectList<ERPKeeperCore.Enterprise.Models.Accounting.Enums.FiscalYearStatus>().Select(i => new { Value = int.Parse(i.Value), Text = i.Text })).DisplayExpr("Text").ValueExpr("Value"));
            columns.AddFor(m => m.Memo);

            columns.AddFor(m => m.AssetBalance).CssClass("bg-fb1").Width(100).Format(Format.FixedPoint);
            columns.AddFor(m => m.LiabilityBalance).CssClass("bg-fb1").Width(100).Format(Format.FixedPoint);
            columns.AddFor(m => m.EquityBalance).CssClass("bg-fb1").Width(100).Format(Format.FixedPoint);


            columns.AddFor(m => m.IncomeBalance).Width(100).Format(Format.FixedPoint);
            columns.AddFor(m => m.ExpenseBalance).Width(100).Format(Format.FixedPoint);
            columns.AddFor(m => m.ProfitBalance).Width(100).Format(Format.FixedPoint);
            columns.AddFor(m => m.IsPosted).AllowEditing(false).Width(30).HeaderCellTemplate(@<text> </text>).CellTemplate(@<text><i class="fas fa-fingerprint text-color-<%= data.PostStatus %>"></i></text>);
        })
        .Summary(s => s.TotalItems(items =>
        {
            items.AddFor(m => m.IncomeBalance).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
            items.AddFor(m => m.ExpenseBalance).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
            items.AddFor(m => m.ProfitBalance).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);


        }))
        )
</div>










