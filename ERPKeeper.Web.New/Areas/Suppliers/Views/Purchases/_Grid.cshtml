


<div id="treeListDemo" class="mb-3 border">

    @(Html.DevExtreme().DataGrid<ERPKeeperCore.Enterprise.Models.Suppliers.Purchase>()
            .ID("gridList")
            .DataSource(d => d.RemoteController().Key("Id")
            .LoadUrl($"/API/{CompanyId}/Suppliers/Purchases/All")
            .InsertUrl($"/API/{CompanyId}/Suppliers/Purchases/Insert")
            .UpdateUrl($"/API/{CompanyId}/Suppliers/Purchases/Update")
            .UpdateMethod("Post")
            .InsertMethod("Post")
            )
            .RowAlternationEnabled(true)
            .KeyExpr("Id")

            .StateStoring(s => s.Enabled(true).Type(StateStoringType.LocalStorage).StorageKey("Purchases" + CompanyId.ToString()))
            .ShowRowLines(false)
            .ShowBorders(false)
            .Paging(paging => paging.PageSize(100))

            .HeaderFilter(headerFilter => headerFilter.Visible(true).Search(s => s.Enabled(true)))
            .FilterRow(filterRow => filterRow.Visible(true).ApplyFilter(GridApplyFilterMode.Auto))

            .ColumnAutoWidth(false)
            .ColumnChooser(columnChooser => columnChooser.Enabled(true))
            .Columns(columns =>
            {


                columns.AddFor(m => m.Date).SortOrder(SortOrder.Desc).SortIndex(1).Width(130);

                columns.AddFor(m => m.Status).AllowEditing(false).Width(80).Lookup(lookup => lookup
            .DataSource(Html.GetEnumSelectList<ERPKeeperCore.Enterprise.Models.Suppliers.Enums.PurchaseStatus>().Select(i => new { Value = int.Parse(i.Value), Text = i.Text }))
            .DisplayExpr("Text")
            .ValueExpr("Value")
            );

                columns.AddFor(m => m.Name).Width(130)
            .CellTemplate(@<text><a href="/@CompanyId/Suppliers/Purchases/<%= data.Id %>/"><%= data.Name %></a></text>);


                columns.AddFor(m => m.SupplierId).Lookup(lookup => lookup
            .DataSource(Organization.ErpCOREDBContext.Profiles.Select(i => new { Value = i.Id, Text = i.Name }))
            .DisplayExpr("Text")
            .ValueExpr("Value"))
            .AllowEditing(false)
            .MinWidth(200)
            .CellTemplate(@<text><a href="/@CompanyId/Suppliers/Suppliers/<%= data.SupplierId %>/"><%= displayValue %></a></text>);


                columns.AddFor(m => m.Reference).Width(180);
                columns.AddFor(m => m.LinesTotalAfterDiscount).Width(130).Format("#,##0.00");
                columns.AddFor(m => m.Total).Width(130).Format("#,##0.00");

                columns.AddFor(m => m.TaxCodeId)
            .Lookup(lookup => lookup
            .DataSource(Organization.ErpCOREDBContext.TaxCodes.Select(i => new { Value = i.Id, Text = i.Name }))
            .DisplayExpr("Text")
            .ValueExpr("Value"))
            .AllowEditing(false)
            .HeaderCellTemplate(@<text>TaxCode</text>)
        .CellTemplate(@<text><a href="/@CompanyId/Taxes/TaxCodes/<%= data.TaxCodeId %>/"><%= displayValue %></a></text>);


                columns.AddFor(m => m.TaxPeriodId).Lookup(lookup => lookup
            .DataSource(Organization.ErpCOREDBContext.TaxPeriods.Select(i => new { Value = i.Id, Text = i.Name }))
            .DisplayExpr("Text")
            .ValueExpr("Value"))
            .ShowInColumnChooser(true)
            .HeaderCellTemplate(@<text>TaxPeriod</text>)
        .CellTemplate(@<text><a href="/@CompanyId/Taxes/TaxPeriods/<%= data.TaxPeriodId %>/"><%= displayValue %></a></text>);

                columns.AddFor(m => m.ExpenseAccountId)
            .Lookup(lookup => lookup.DataSource(Organization.ChartOfAccount.AssetsAndExpenses.Select(t => new { t.Id, t.Name }).OrderBy(t => t.Name).ToList()).DisplayExpr("Name").ValueExpr("Id"))
            .Width(150)
            .Visible(false)
            .HeaderCellTemplate(@<text>Expense</text>)
        .CellTemplate(@<text><a href="/@CompanyId/Accounting/Accounts/<%= data.WithDrawAccountId %>/"><%= displayValue %></a></text>);


                columns.AddFor(m => m.IsPosted).AllowEditing(false).Width(30).HeaderCellTemplate(@<text> </text>).CellTemplate(@<text><i class="fas fa-fingerprint text-<%= data.IsPosted %>"></i></text>);

            })
        .Summary(s =>
        s.TotalItems(items =>
        {
            items.AddFor(m => m.LinesTotalAfterDiscount).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(",##0");
            items.AddFor(m => m.Total).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(",##0");
        }))
        )
</div>

