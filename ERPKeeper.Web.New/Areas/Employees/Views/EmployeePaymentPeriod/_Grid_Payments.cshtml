@model ERPKeeperCore.Enterprise.Models.Employees.EmployeePaymentPeriod

@{
    var employees = Organization.ErpCOREDBContext.Employees.Select(i => new { Value = i.Id, Name = i.Profile.Name, TaxNumber = i.Profile.TaxNumber });

}


<div id="treeListDemo" class="mb-3 border">

    @(
        Html.DevExtreme().DataGrid<ERPKeeperCore.Enterprise.Models.Employees.EmployeePayment>()
            .ID("gridList")
            .DataSource(d => d.RemoteController().Key("Id")
            .LoadUrl($"/API/{CompanyId}/Employees/EmployeePaymentPeriods/{Model.Id}/EmployeePayments/All")
            .InsertUrl($"/API/{CompanyId}/Employees/EmployeePaymentPeriods/{Model.Id}/EmployeePayments/Insert")
            .UpdateUrl($"/API/{CompanyId}/Employees/EmployeePaymentPeriods/{Model.Id}/EmployeePayments/Update").UpdateMethod("Post")
            .DeleteUrl($"/API/{CompanyId}/Employees/EmployeePaymentPeriods/{Model.Id}/EmployeePayments/Delete").DeleteMethod("Post")
            )
            .KeyExpr("Id")
            .RowAlternationEnabled(true).AllowColumnReordering(true)
            .ShowRowLines(true)
            .ShowBorders(false)
            .Width("100%")
            .Paging(paging => paging.PageSize(100))
            .Editing(editing => editing.Mode(GridEditMode.Row).AllowAdding(true).AllowUpdating(true).UseIcons(true)
            )

            .AllowColumnResizing(true).AllowColumnReordering(true)
            .HeaderFilter(headerFilter => headerFilter.Visible(true).Search(s=>s.Enabled(true)))
            .FilterRow(filterRow => filterRow
            .Visible(true)
            .ApplyFilter(GridApplyFilterMode.Auto)
            )
            .ColumnAutoWidth(false)
                .Columns(columns =>
                {
                    columns.AddFor(m => m.Name).Width(250)
            .CellTemplate(@<text><a href="/@CompanyId/Employees/EmployeePayments/<%= data.Id %>/">PM. <%= displayValue %></a></text>);


                columns.AddFor(m => m.EmployeeId).Width(250)
            .Lookup(lookup => lookup
            .DataSource(employees)
            .DisplayExpr("Name")
            .ValueExpr("Value"))
            .HeaderCellTemplate(@<text>Name</text>)
            .CellTemplate(@<text><a href="/@CompanyId/Employees/Employees/<%= data.EmployeeId %>/"><%= displayValue %></a></text>);

                columns.AddFor(m => m.EmployeeId).AllowEditing(false).Width(150)
            .Lookup(lookup => lookup
            .DataSource(employees)
            .DisplayExpr("TaxNumber")
            .ValueExpr("Value"))
            .AllowEditing(false)
            .HeaderCellTemplate(@<text>TAX Id</text>)
        .CellTemplate(@<text><a href="/@CompanyId/Employees/Employees/<%= data.EmployeeId %>/"><%= displayValue %></a></text>);




                columns.AddFor(m => m.TotalEarning).AllowEditing(false).Format("#,##0.00").HeaderCellTemplate(@<text>Earning</text>);
            
                columns.AddFor(m => m.TotalDeduction).AllowEditing(false).Format("#,##0.00").HeaderCellTemplate(@<text>Deduction</text>);




                columns.AddFor(m => m.IsPosted)
            .AllowEditing(false).Width(30)
            .HeaderCellTemplate(@<text> </text>)
        .CellTemplate(@<text><i class="fas fa-fingerprint text-<%= data.IsPosted %>"></i></text>);






            }).Summary(s =>
    s.TotalItems(items =>
    {

            items.AddFor(m => m.TotalEarning).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(",##0");
            items.AddFor(m => m.TotalDeduction).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(",##0");
        }))


        )
</div>


