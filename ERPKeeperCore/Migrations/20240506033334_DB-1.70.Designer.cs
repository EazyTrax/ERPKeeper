// <auto-generated />
using System;
using ERPKeeperCore.Enterprise.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ERPKeeperCore.Enterprise.Migrations
{
    [DbContext(typeof(ERPCoreDbContext))]
    [Migration("20240506033334_DB-1.70")]
    partial class DB170
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BalanceCalulatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentCredit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("CurrentDebit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCashEquivalent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFolder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLiquidity")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OpeningCredit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("OpeningDebit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("SubType")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.DefaultAccount", b =>
                {
                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Type");

                    b.HasIndex("AccountId");

                    b.ToTable("DefaultAccounts");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.FiscalYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExpenseBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("IncomeBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FiscalYears");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.FiscalYearAccountBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ClosedCredit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ClosedDebit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ClosingCredit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ClosingDebit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("FiscalYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("OpeningCredit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("OpeningDebit")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("FiscalYearId");

                    b.ToTable("FiscalYearAccountBalances");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.JournalEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("JournalEntryTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JournalEntryTypeId");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.ToTable("JournalEntries");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.JournalEntryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Credit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Debit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("JournalEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("JournalEntryId");

                    b.ToTable("JournalEntryItems");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.JournalEntryType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JournalEntryType");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("FiscalYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.TransactionLedger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionLedgers");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Assets.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssetTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AssetValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DepreciationPerYear")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastCreateSchedule")
                        .HasColumnType("datetime2");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SavageValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartDeprecationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetTypeId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Assets.AssetDeprecateSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DepreciateAccumulation")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("DepreciateOffsetValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("DepreciationValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<decimal>("OpeningValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PostStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("RemainValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetDeprecateSchedules");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Assets.AssetType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccumulateDeprecateAccId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccumulateDeprecateAccId");

                    b.Property<Guid?>("AmortizeExpenseAccId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AmortizeExpenseAccId");

                    b.Property<Guid?>("AwaitDeprecateAccId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AwaitDeprecateAccId");

                    b.Property<string>("CodePrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DeprecatedAble")
                        .HasColumnType("bit");

                    b.Property<int>("DepreciationMethod")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PurchaseAccId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PurchaseAccId");

                    b.Property<decimal>("ScrapValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("UseFulLifeYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccumulateDeprecateAccId");

                    b.HasIndex("AmortizeExpenseAccId");

                    b.HasIndex("AwaitDeprecateAccId");

                    b.HasIndex("PurchaseAccId");

                    b.ToTable("AssetTypes");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.CapitalActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssetAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("EachStockParValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("EquityAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<int>("PostStatus")
                        .HasColumnType("int");

                    b.Property<int>("StockAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("TrnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssetAccountId");

                    b.HasIndex("EquityAccountId");

                    b.ToTable("CapitalActivities");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalBalanceCount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalSales")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TotalSalesCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Customers.CustomerQuote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<decimal>("LinesTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("TaxCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TaxCodeId");

                    b.ToTable("CustomerQuotes");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Customers.CustomerQuoteItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("QuoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Serial")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("QuoteId");

                    b.ToTable("CustomerQuoteItems");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Customers.ReceivePayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AmountBankFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AmountDiscount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AmountRetention")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DiscountAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<Guid?>("PayToAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceivableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RetentionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountAccountId");

                    b.HasIndex("PayToAccountId");

                    b.HasIndex("ReceivableAccountId");

                    b.HasIndex("RetentionTypeId");

                    b.HasIndex("SaleId");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.ToTable("ReceivePayments");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Customers.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<decimal>("LinesTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReceivableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("TaxCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaxPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReceivableAccountId");

                    b.HasIndex("TaxCodeId");

                    b.HasIndex("TaxPeriodId");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Customers.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Serial")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.DataItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<int>("Key")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataItems");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeePositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeePositionId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Employees.EmployeePayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeePaymentPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<Guid?>("PayFromAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalDeduction")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalEarning")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeePaymentPeriodId");

                    b.HasIndex("PayFromAccountId");

                    b.ToTable("EmployeePayments");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Employees.EmployeePaymentItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("EmployeePaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeePaymentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Memo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeePaymentId");

                    b.HasIndex("EmployeePaymentTypeId");

                    b.ToTable("EmployeePaymentItems");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Employees.EmployeePaymentPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PayFromAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalDeduction")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalEarning")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("PayFromAccountId");

                    b.ToTable("EmployeePaymentPeriods");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Employees.EmployeePaymentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayDirection")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountUid");

                    b.ToTable("EmployeePaymentTypes");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Employees.EmployeePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Requried")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeePositions");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.FundTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WithDrawAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("WithDrawAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.HasIndex("WithDrawAccountId");

                    b.ToTable("FundTransfers");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.FundTransferItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("FundTransferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("FundTransferId");

                    b.ToTable("FundTransferItems");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.Lend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountLend")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AmountReturn")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LendingAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<Guid?>("PayingAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LendingAccountId");

                    b.HasIndex("PayingAccountId");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.ToTable("Lends");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.LendReturn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReturnToAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LendId");

                    b.HasIndex("ReturnToAccountId");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.ToTable("LendReturns");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.LiabilityPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AmountBankFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AmountDiscount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LiabilityAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LiabilityAccountId");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.ToTable("LiabilityPayments");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.LiabilityPaymentPayFromAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("LiabilityPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LiabilityPaymentId");

                    b.ToTable("LiabilityPaymentPayFromAccount");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountLoan")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AmountReturn")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LoanAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<Guid?>("RecevingAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LoanAccountId");

                    b.HasIndex("RecevingAccountId");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.LoanReturn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LoanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReturnFromAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LoanId");

                    b.HasIndex("ReturnFromAccountId");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.ToTable("LoanReturns");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.RetentionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("RetentionToAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RetentionToAccountId");

                    b.ToTable("RetentionTypes");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Investors.Investor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Investors");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Items.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemsCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PublishOnline")
                        .HasColumnType("bit");

                    b.Property<string>("ShotName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Items.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountOnHand")
                        .HasColumnType("int");

                    b.Property<int>("AmountOnPurchaseOrder")
                        .HasColumnType("int");

                    b.Property<int>("AmountOnQuotation")
                        .HasColumnType("int");

                    b.Property<int>("AmountOnSaleOrder")
                        .HasColumnType("int");

                    b.Property<int>("AmountPurchase")
                        .HasColumnType("int");

                    b.Property<int>("AmountSold")
                        .HasColumnType("int");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IncomeAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<bool>("OnlineSale")
                        .HasColumnType("bit");

                    b.Property<string>("PartNumber")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid?>("PurchaseAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StockAmount")
                        .HasColumnType("int");

                    b.Property<string>("UPC")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("IncomeAccountId");

                    b.HasIndex("ItemGroupId");

                    b.HasIndex("PurchaseAccountId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Items.ItemGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemsCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ItemGroups");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.PaymentTerm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("DueDayCount")
                        .HasColumnType("int");

                    b.Property<int>("MaxDayCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTerms");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Profiles.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailLogin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaceBook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRDVerify")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelfOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileType")
                        .HasColumnType("int");

                    b.Property<string>("ShotName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Profiles.ProfileAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProfileId");

                    b.Property<DateTime?>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileAddresses");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Profiles.ProfileBankAccount", b =>
                {
                    b.Property<Guid>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BankProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProfileId");

                    b.HasKey("BankAccountId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileBankAccounts");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Profiles.ProfileContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShippingNote")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileContacts");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Profiles.ProfileRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileRoles");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Security.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Suppliers.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<decimal>("LinesTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<Guid?>("PayableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SupplierAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("TaxCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaxPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PayableAccountId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TaxCodeId");

                    b.HasIndex("TaxPeriodId");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Suppliers.PurchaseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("PurchaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Serial")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseItems");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Suppliers.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreditAgeLimit")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("DefaultTaxCodeUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TotalBalanceCount")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPurchases")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TotalPurchasesCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefaultTaxCodeUid");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Suppliers.SupplierPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AmountBankFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AmountDiscount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AmountRetention")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<Guid?>("PayFromAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PayableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RetentionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PayFromAccountId");

                    b.HasIndex("PayableAccountId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("RetentionTypeId");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.ToTable("SupplierPayments");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Suppliers.SupplierQuote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LinesTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SupplierAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("TaxCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TaxCodeId");

                    b.ToTable("SupplierQuotes");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Suppliers.SupplierQuoteItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Serial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupplierQuoteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("SupplierQuoteId");

                    b.ToTable("SupplierQuoteItems");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Taxes.IncomeTax", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FiscalYearUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IncomeTaxExpenseAccountGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LiabilityAccountGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Memo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<Guid?>("PayFromAccountGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProfitAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("TrDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Uid");

                    b.HasIndex("FiscalYearUid");

                    b.HasIndex("IncomeTaxExpenseAccountGuid");

                    b.HasIndex("LiabilityAccountGuid");

                    b.ToTable("IncomeTaxes");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Taxes.TaxCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CloseToAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommercialCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InputTaxAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReady")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OutputTaxAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("TaxAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TaxDirection")
                        .HasColumnType("int");

                    b.Property<Guid?>("TaxGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaxPayableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaxReceivableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isRecoverable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AssignAccountId");

                    b.HasIndex("CloseToAccountId");

                    b.HasIndex("InputTaxAccountId");

                    b.HasIndex("OutputTaxAccountId");

                    b.HasIndex("TaxAccountId");

                    b.HasIndex("TaxPayableAccountId");

                    b.ToTable("TaxCodes");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Taxes.TaxPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CloseToAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FiscalYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LiabilityPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("No")
                        .HasColumnType("int");

                    b.Property<int>("PostStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("PuchasesBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PurchasesCount")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasesTaxBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("SalesBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SalesCount")
                        .HasColumnType("int");

                    b.Property<decimal>("SalesTaxBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CloseToAccountId");

                    b.ToTable("TaxPeriods");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.DefaultAccount", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.FiscalYearAccountBalance", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.FiscalYear", null)
                        .WithMany("FiscalYearAccountBalances")
                        .HasForeignKey("FiscalYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.JournalEntry", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.JournalEntryType", "JournalEntryType")
                        .WithMany("JournalEntries")
                        .HasForeignKey("JournalEntryTypeId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Transaction", "Transaction")
                        .WithOne("JournalEntry")
                        .HasForeignKey("ERPKeeperCore.Enterprise.Models.Accounting.JournalEntry", "TransactionId");

                    b.Navigation("JournalEntryType");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.JournalEntryItem", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.JournalEntry", "JournalEntry")
                        .WithMany("JournalEntryItems")
                        .HasForeignKey("JournalEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("JournalEntry");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.TransactionLedger", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "Account")
                        .WithMany("TransactionLedgers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Transaction", "Transaction")
                        .WithMany("Ledgers")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Assets.Asset", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Assets.AssetType", "AssetType")
                        .WithMany("Assets")
                        .HasForeignKey("AssetTypeId");

                    b.Navigation("AssetType");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Assets.AssetDeprecateSchedule", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Assets.Asset", "Asset")
                        .WithMany("DepreciationSchedules")
                        .HasForeignKey("AssetId");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Assets.AssetType", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "AccumulateDeprecateAcc")
                        .WithMany()
                        .HasForeignKey("AccumulateDeprecateAccId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "AmortizeExpenseAccount")
                        .WithMany()
                        .HasForeignKey("AmortizeExpenseAccId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "AwaitDeprecateAccount")
                        .WithMany()
                        .HasForeignKey("AwaitDeprecateAccId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "AssetAccount")
                        .WithMany()
                        .HasForeignKey("PurchaseAccId");

                    b.Navigation("AccumulateDeprecateAcc");

                    b.Navigation("AmortizeExpenseAccount");

                    b.Navigation("AssetAccount");

                    b.Navigation("AwaitDeprecateAccount");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.CapitalActivity", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "AssetAccount")
                        .WithMany()
                        .HasForeignKey("AssetAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "EquityAccount")
                        .WithMany()
                        .HasForeignKey("EquityAccountId");

                    b.Navigation("AssetAccount");

                    b.Navigation("EquityAccount");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Customers.Customer", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Profiles.Profile", "Profile")
                        .WithOne("Customer")
                        .HasForeignKey("ERPKeeperCore.Enterprise.Models.Customers.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Customers.CustomerQuote", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Taxes.TaxCode", "TaxCode")
                        .WithMany()
                        .HasForeignKey("TaxCodeId");

                    b.Navigation("Customer");

                    b.Navigation("TaxCode");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Customers.CustomerQuoteItem", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Customers.CustomerQuote", "Quote")
                        .WithMany("Items")
                        .HasForeignKey("QuoteId");

                    b.Navigation("Item");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Customers.ReceivePayment", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "DiscountAccount")
                        .WithMany()
                        .HasForeignKey("DiscountAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "PayToAccount")
                        .WithMany()
                        .HasForeignKey("PayToAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "ReceivableAccount")
                        .WithMany()
                        .HasForeignKey("ReceivableAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Financial.RetentionType", "RetentionType")
                        .WithMany("ReceivePayments")
                        .HasForeignKey("RetentionTypeId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Customers.Sale", "Sale")
                        .WithMany("ReceivePayments")
                        .HasForeignKey("SaleId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Transaction", "Transaction")
                        .WithOne("ReceivePayment")
                        .HasForeignKey("ERPKeeperCore.Enterprise.Models.Customers.ReceivePayment", "TransactionId");

                    b.Navigation("DiscountAccount");

                    b.Navigation("PayToAccount");

                    b.Navigation("ReceivableAccount");

                    b.Navigation("RetentionType");

                    b.Navigation("Sale");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Customers.Sale", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Customers.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "ReceivableAccount")
                        .WithMany()
                        .HasForeignKey("ReceivableAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Taxes.TaxCode", "TaxCode")
                        .WithMany()
                        .HasForeignKey("TaxCodeId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Taxes.TaxPeriod", "TaxPeriod")
                        .WithMany("Sales")
                        .HasForeignKey("TaxPeriodId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Transaction", "Transaction")
                        .WithOne("Sale")
                        .HasForeignKey("ERPKeeperCore.Enterprise.Models.Customers.Sale", "TransactionId");

                    b.Navigation("Customer");

                    b.Navigation("ReceivableAccount");

                    b.Navigation("TaxCode");

                    b.Navigation("TaxPeriod");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Customers.SaleItem", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Customers.Sale", "Sale")
                        .WithMany("Items")
                        .HasForeignKey("SaleId");

                    b.Navigation("Item");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Employees.Employee", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Employees.EmployeePosition", "EmployeePosition")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeePositionId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Profiles.Profile", "Profile")
                        .WithOne("Employee")
                        .HasForeignKey("ERPKeeperCore.Enterprise.Models.Employees.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeePosition");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Employees.EmployeePayment", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Employees.EmployeePaymentPeriod", "EmployeePaymentPeriod")
                        .WithMany("EmployeePayments")
                        .HasForeignKey("EmployeePaymentPeriodId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "PayFromAccount")
                        .WithMany()
                        .HasForeignKey("PayFromAccountId");

                    b.Navigation("Employee");

                    b.Navigation("EmployeePaymentPeriod");

                    b.Navigation("PayFromAccount");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Employees.EmployeePaymentItem", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Employees.EmployeePayment", "EmployeePayment")
                        .WithMany("PaymentItems")
                        .HasForeignKey("EmployeePaymentId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Employees.EmployeePaymentType", "EmployeePaymentType")
                        .WithMany("Payments")
                        .HasForeignKey("EmployeePaymentTypeId");

                    b.Navigation("EmployeePayment");

                    b.Navigation("EmployeePaymentType");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Employees.EmployeePaymentPeriod", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "PayFromAccount")
                        .WithMany()
                        .HasForeignKey("PayFromAccountId");

                    b.Navigation("PayFromAccount");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Employees.EmployeePaymentType", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountUid");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.FundTransfer", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Transaction", "Transaction")
                        .WithOne("FundTransfer")
                        .HasForeignKey("ERPKeeperCore.Enterprise.Models.Financial.FundTransfer", "TransactionId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "WithDrawAccount")
                        .WithMany()
                        .HasForeignKey("WithDrawAccountId");

                    b.Navigation("Transaction");

                    b.Navigation("WithDrawAccount");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.FundTransferItem", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Financial.FundTransfer", "FundTransfer")
                        .WithMany("FundTransferDepositLines")
                        .HasForeignKey("FundTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("FundTransfer");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.Lend", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "LendingAccount")
                        .WithMany()
                        .HasForeignKey("LendingAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "PayingAccount")
                        .WithMany()
                        .HasForeignKey("PayingAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Transaction", "Transaction")
                        .WithOne("Lend")
                        .HasForeignKey("ERPKeeperCore.Enterprise.Models.Financial.Lend", "TransactionId");

                    b.Navigation("LendingAccount");

                    b.Navigation("PayingAccount");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.LendReturn", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Financial.Lend", "Lend")
                        .WithMany("LendReturns")
                        .HasForeignKey("LendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "ReturnToAccount")
                        .WithMany()
                        .HasForeignKey("ReturnToAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Transaction", "Transaction")
                        .WithOne("LendReturn")
                        .HasForeignKey("ERPKeeperCore.Enterprise.Models.Financial.LendReturn", "TransactionId");

                    b.Navigation("Lend");

                    b.Navigation("ReturnToAccount");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.LiabilityPayment", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "LiabilityAccount")
                        .WithMany()
                        .HasForeignKey("LiabilityAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Transaction", "Transaction")
                        .WithOne("LiabilityPayment")
                        .HasForeignKey("ERPKeeperCore.Enterprise.Models.Financial.LiabilityPayment", "TransactionId");

                    b.Navigation("LiabilityAccount");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.LiabilityPaymentPayFromAccount", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Financial.LiabilityPayment", "LiabilityPayment")
                        .WithMany("LiabilityPaymentPayFromAccounts")
                        .HasForeignKey("LiabilityPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("LiabilityPayment");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.Loan", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "LoanAccount")
                        .WithMany()
                        .HasForeignKey("LoanAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "RecevingAccount")
                        .WithMany()
                        .HasForeignKey("RecevingAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Transaction", "Transaction")
                        .WithOne("Loan")
                        .HasForeignKey("ERPKeeperCore.Enterprise.Models.Financial.Loan", "TransactionId");

                    b.Navigation("LoanAccount");

                    b.Navigation("RecevingAccount");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.LoanReturn", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Financial.Loan", "Loan")
                        .WithMany("LoanReturns")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "ReturnFromAccount")
                        .WithMany()
                        .HasForeignKey("ReturnFromAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Transaction", "Transaction")
                        .WithOne("LoanReturn")
                        .HasForeignKey("ERPKeeperCore.Enterprise.Models.Financial.LoanReturn", "TransactionId");

                    b.Navigation("Loan");

                    b.Navigation("ReturnFromAccount");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.RetentionType", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "RetentionToAccount")
                        .WithMany()
                        .HasForeignKey("RetentionToAccountId");

                    b.Navigation("RetentionToAccount");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Investors.Investor", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Profiles.Profile", "Profile")
                        .WithOne("Investor")
                        .HasForeignKey("ERPKeeperCore.Enterprise.Models.Investors.Investor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Items.Item", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Items.Brand", "Brand")
                        .WithMany("Items")
                        .HasForeignKey("BrandId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "IncomeAccount")
                        .WithMany()
                        .HasForeignKey("IncomeAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Items.ItemGroup", "ItemGroup")
                        .WithMany("Items")
                        .HasForeignKey("ItemGroupId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "PurchaseAccount")
                        .WithMany()
                        .HasForeignKey("PurchaseAccountId");

                    b.Navigation("Brand");

                    b.Navigation("IncomeAccount");

                    b.Navigation("ItemGroup");

                    b.Navigation("PurchaseAccount");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Items.ItemGroup", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Items.ItemGroup", "Parent")
                        .WithMany("Child")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Profiles.ProfileAddress", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Profiles.Profile", "Profile")
                        .WithMany("Addresses")
                        .HasForeignKey("ProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Profiles.ProfileBankAccount", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Profiles.Profile", "Profile")
                        .WithMany("BankAccounts")
                        .HasForeignKey("ProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Profiles.ProfileContact", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Profiles.Profile", "Profile")
                        .WithMany("Contacts")
                        .HasForeignKey("ProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Profiles.ProfileRole", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Profiles.Profile", "Profile")
                        .WithMany("ProfileRoles")
                        .HasForeignKey("ProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Projects.Project", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Projects.Project", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Suppliers.Purchase", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "PayableAccount")
                        .WithMany()
                        .HasForeignKey("PayableAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Suppliers.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Taxes.TaxCode", "TaxCode")
                        .WithMany()
                        .HasForeignKey("TaxCodeId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Taxes.TaxPeriod", "TaxPeriod")
                        .WithMany("Purchases")
                        .HasForeignKey("TaxPeriodId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Transaction", "Transaction")
                        .WithOne("Purchase")
                        .HasForeignKey("ERPKeeperCore.Enterprise.Models.Suppliers.Purchase", "TransactionId");

                    b.Navigation("PayableAccount");

                    b.Navigation("Supplier");

                    b.Navigation("TaxCode");

                    b.Navigation("TaxPeriod");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Suppliers.PurchaseItem", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Suppliers.Purchase", "Purchase")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseId");

                    b.Navigation("Item");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Suppliers.Supplier", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Taxes.TaxCode", "DefaultTaxCode")
                        .WithMany()
                        .HasForeignKey("DefaultTaxCodeUid");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Profiles.Profile", "Profile")
                        .WithOne("Supplier")
                        .HasForeignKey("ERPKeeperCore.Enterprise.Models.Suppliers.Supplier", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultTaxCode");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Suppliers.SupplierPayment", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "PayFromAccount")
                        .WithMany()
                        .HasForeignKey("PayFromAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "PayableAccount")
                        .WithMany()
                        .HasForeignKey("PayableAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Suppliers.Purchase", "Purchase")
                        .WithMany("SupplierPayments")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Financial.RetentionType", "RetentionType")
                        .WithMany("SupplierPayments")
                        .HasForeignKey("RetentionTypeId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Transaction", "Transaction")
                        .WithOne("SupplierPayment")
                        .HasForeignKey("ERPKeeperCore.Enterprise.Models.Suppliers.SupplierPayment", "TransactionId");

                    b.Navigation("PayFromAccount");

                    b.Navigation("PayableAccount");

                    b.Navigation("Purchase");

                    b.Navigation("RetentionType");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Suppliers.SupplierQuote", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Taxes.TaxCode", "TaxCode")
                        .WithMany()
                        .HasForeignKey("TaxCodeId");

                    b.Navigation("Supplier");

                    b.Navigation("TaxCode");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Suppliers.SupplierQuoteItem", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Suppliers.SupplierQuote", "SupplierQuote")
                        .WithMany("Items")
                        .HasForeignKey("SupplierQuoteId");

                    b.Navigation("Item");

                    b.Navigation("SupplierQuote");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Taxes.IncomeTax", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.FiscalYear", "FiscalYear")
                        .WithMany()
                        .HasForeignKey("FiscalYearUid");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "IncomeTaxExpenAccount")
                        .WithMany()
                        .HasForeignKey("IncomeTaxExpenseAccountGuid");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "LiabilityAccount")
                        .WithMany()
                        .HasForeignKey("LiabilityAccountGuid");

                    b.Navigation("FiscalYear");

                    b.Navigation("IncomeTaxExpenAccount");

                    b.Navigation("LiabilityAccount");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Taxes.TaxCode", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "AssignAccount")
                        .WithMany()
                        .HasForeignKey("AssignAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "CloseToAccount")
                        .WithMany()
                        .HasForeignKey("CloseToAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "InputTaxAccount")
                        .WithMany()
                        .HasForeignKey("InputTaxAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "OutputTaxAccount")
                        .WithMany()
                        .HasForeignKey("OutputTaxAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "TaxAccount")
                        .WithMany()
                        .HasForeignKey("TaxAccountId");

                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "TaxPayableAccount")
                        .WithMany()
                        .HasForeignKey("TaxPayableAccountId");

                    b.Navigation("AssignAccount");

                    b.Navigation("CloseToAccount");

                    b.Navigation("InputTaxAccount");

                    b.Navigation("OutputTaxAccount");

                    b.Navigation("TaxAccount");

                    b.Navigation("TaxPayableAccount");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Taxes.TaxPeriod", b =>
                {
                    b.HasOne("ERPKeeperCore.Enterprise.Models.Accounting.Account", "CloseToAccount")
                        .WithMany()
                        .HasForeignKey("CloseToAccountId");

                    b.Navigation("CloseToAccount");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.Account", b =>
                {
                    b.Navigation("TransactionLedgers");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.FiscalYear", b =>
                {
                    b.Navigation("FiscalYearAccountBalances");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.JournalEntry", b =>
                {
                    b.Navigation("JournalEntryItems");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.JournalEntryType", b =>
                {
                    b.Navigation("JournalEntries");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Accounting.Transaction", b =>
                {
                    b.Navigation("FundTransfer");

                    b.Navigation("JournalEntry");

                    b.Navigation("Ledgers");

                    b.Navigation("Lend");

                    b.Navigation("LendReturn");

                    b.Navigation("LiabilityPayment");

                    b.Navigation("Loan");

                    b.Navigation("LoanReturn");

                    b.Navigation("Purchase");

                    b.Navigation("ReceivePayment");

                    b.Navigation("Sale");

                    b.Navigation("SupplierPayment");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Assets.Asset", b =>
                {
                    b.Navigation("DepreciationSchedules");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Assets.AssetType", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Customers.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Customers.CustomerQuote", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Customers.Sale", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("ReceivePayments");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Employees.EmployeePayment", b =>
                {
                    b.Navigation("PaymentItems");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Employees.EmployeePaymentPeriod", b =>
                {
                    b.Navigation("EmployeePayments");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Employees.EmployeePaymentType", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Employees.EmployeePosition", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.FundTransfer", b =>
                {
                    b.Navigation("FundTransferDepositLines");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.Lend", b =>
                {
                    b.Navigation("LendReturns");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.LiabilityPayment", b =>
                {
                    b.Navigation("LiabilityPaymentPayFromAccounts");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.Loan", b =>
                {
                    b.Navigation("LoanReturns");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Financial.RetentionType", b =>
                {
                    b.Navigation("ReceivePayments");

                    b.Navigation("SupplierPayments");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Items.Brand", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Items.ItemGroup", b =>
                {
                    b.Navigation("Child");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Profiles.Profile", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BankAccounts");

                    b.Navigation("Contacts");

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Employee")
                        .IsRequired();

                    b.Navigation("Investor")
                        .IsRequired();

                    b.Navigation("ProfileRoles");

                    b.Navigation("Supplier")
                        .IsRequired();
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Projects.Project", b =>
                {
                    b.Navigation("Childs");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Suppliers.Purchase", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("SupplierPayments");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Suppliers.Supplier", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Suppliers.SupplierQuote", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ERPKeeperCore.Enterprise.Models.Taxes.TaxPeriod", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
